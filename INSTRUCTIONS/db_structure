CREATE TABLE public.clusters (
id uuid NOT NULL DEFAULT gen_random_uuid(),
name text NOT NULL,
leader uuid NULL,
company uuid NULL,
created_at timestamp with time zone NOT NULL DEFAULT now(),
level integer NULL,
CONSTRAINT clusters_pkey PRIMARY KEY (id),
CONSTRAINT clusters_company_fkey FOREIGN KEY (company) REFERENCES companies(id),
CONSTRAINT clusters_leader_fkey FOREIGN KEY (leader) REFERENCES users(id)
) TABLESPACE pg_default;

CREATE TABLE public.companies (
id uuid NOT NULL DEFAULT gen_random_uuid(),
name text NOT NULL,
created_at timestamp with time zone NULL DEFAULT now(),
CONSTRAINT companies_pkey PRIMARY KEY (id)
) TABLESPACE pg_default;

CREATE TABLE public.feedbacks (
id uuid NOT NULL,
sender uuid NULL,
receiver uuid NULL,
question_id uuid NULL,
value integer NULL,
session_id uuid NOT NULL,
rule_id uuid NULL,
company uuid NOT NULL,
created_at timestamp with time zone NOT NULL DEFAULT now(),
comment text NULL,
CONSTRAINT feedbacks_pkey PRIMARY KEY (id),
CONSTRAINT feedbacks_question_id_fkey FOREIGN KEY (question_id) REFERENCES questions(id),
CONSTRAINT feedbacks_receiver_fkey FOREIGN KEY (receiver) REFERENCES users(id),
CONSTRAINT feedbacks_company_fkey FOREIGN KEY (company) REFERENCES companies(id),
CONSTRAINT feedbacks_session_id_fkey FOREIGN KEY (session_id) REFERENCES sessions(id),
CONSTRAINT feedbacks_rule_id_fkey FOREIGN KEY (rule_id) REFERENCES rules(id),
CONSTRAINT feedbacks_sender_fkey FOREIGN KEY (sender) REFERENCES users(id),
CONSTRAINT feedbacks_response_value_check CHECK (((value >= 1) AND (value <= 5)))
) TABLESPACE pg_default;

CREATE TABLE public.levels (
id uuid NOT NULL DEFAULT gen_random_uuid(),
role text NULL,
step integer NOT NULL,
execution_weight integer NOT NULL,
soft_weight integer NOT NULL,
strategy_weight integer NOT NULL,
standard numeric(5,2) NOT NULL,
company uuid NOT NULL,
created_at timestamp with time zone NOT NULL DEFAULT now(),
CONSTRAINT levels_pkey PRIMARY KEY (id),
CONSTRAINT levels_company_fkey FOREIGN KEY (company) REFERENCES companies(id),
CONSTRAINT levels_execution_weight_check CHECK (((execution_weight >= 0) AND (execution_weight <= 100))),
CONSTRAINT levels_soft_weight_check CHECK (((soft_weight >= 0) AND (soft_weight <= 100))),
CONSTRAINT levels_strategy_weight_check CHECK (((strategy_weight >= 0) AND (strategy_weight <= 100)))
) TABLESPACE pg_default;

CREATE TABLE public.processes (
id uuid NOT NULL DEFAULT gen_random_uuid(),
name text NOT NULL,
linked_question_id uuid NOT NULL,
company uuid NOT NULL,
created_at timestamp with time zone NOT NULL DEFAULT now(),
CONSTRAINT processes_pkey PRIMARY KEY (id),
CONSTRAINT processes_company_fkey FOREIGN KEY (company) REFERENCES companies(id),
CONSTRAINT processes_linked_question_id_fkey FOREIGN KEY (linked_question_id) REFERENCES questions(id)
) TABLESPACE pg_default;

CREATE TABLE public.question_tags (
id uuid NOT NULL,
question_id uuid NOT NULL,
score integer NOT NULL,
description text NOT NULL,
company uuid NOT NULL,
created_at timestamp with time zone NOT NULL DEFAULT now(),
CONSTRAINT question_tags_pkey PRIMARY KEY (id),
CONSTRAINT question_tags_company_fkey FOREIGN KEY (company) REFERENCES companies(id),
CONSTRAINT question_tags_question_id_fkey FOREIGN KEY (question_id) REFERENCES questions(id) ON DELETE CASCADE
) TABLESPACE pg_default;

CREATE TABLE public.questions (
id uuid NOT NULL DEFAULT gen_random_uuid(),
description text NOT NULL,
type text NOT NULL,
company uuid NOT NULL,
created_at timestamp with time zone NOT NULL DEFAULT now(),
CONSTRAINT questions_pkey PRIMARY KEY (id),
CONSTRAINT questions_company_fkey FOREIGN KEY (company) REFERENCES companies(id)
) TABLESPACE pg_default;

CREATE TABLE public.rules (
id uuid NOT NULL DEFAULT gen_random_uuid(),
number integer NOT NULL,
content_sql text NOT NULL,
company uuid NOT NULL,
created_at timestamp with time zone NOT NULL DEFAULT now(),
CONSTRAINT rules_pkey PRIMARY KEY (id),
CONSTRAINT rules_company_fkey FOREIGN KEY (company) REFERENCES companies(id)
) TABLESPACE pg_default;

CREATE TABLE public.sessions (
id uuid NOT NULL DEFAULT gen_random_uuid(),
name text NOT NULL,
status text NOT NULL,
company uuid NULL,
start_time timestamp with time zone NULL,
end_time timestamp with time zone NULL,
created_at timestamp with time zone NULL DEFAULT now(),
CONSTRAINT sessions_pkey PRIMARY KEY (id),
CONSTRAINT sessions_company_fkey FOREIGN KEY (company) REFERENCES companies(id)
) TABLESPACE pg_default;

CREATE TABLE public.team_clusters (
id uuid NOT NULL DEFAULT gen_random_uuid(),
team_id uuid NULL,
cluster_id uuid NULL,
created_at timestamp with time zone NULL DEFAULT now(),
CONSTRAINT team_clusters_pkey PRIMARY KEY (id),
CONSTRAINT team_clusters_cluster_id_fkey FOREIGN KEY (cluster_id) REFERENCES clusters(id),
CONSTRAINT team_clusters_team_id_fkey FOREIGN KEY (team_id) REFERENCES teams(id)
) TABLESPACE pg_default;

CREATE TABLE public.teams (
id uuid NOT NULL DEFAULT gen_random_uuid(),
name text NOT NULL,
leader uuid NOT NULL,
company uuid NOT NULL,
created_at timestamp with time zone NOT NULL DEFAULT now(),
project boolean NULL DEFAULT false,
CONSTRAINT teams_pkey PRIMARY KEY (id),
CONSTRAINT teams_company_fkey FOREIGN KEY (company) REFERENCES companies(id),
CONSTRAINT teams_leader_fkey FOREIGN KEY (leader) REFERENCES users(id)
) TABLESPACE pg_default;

CREATE TABLE public.user_processes (
id uuid NOT NULL DEFAULT gen_random_uuid(),
user_id uuid NULL,
process_id uuid NULL,
created_at timestamp with time zone NOT NULL DEFAULT now(),
CONSTRAINT user_processes_pkey PRIMARY KEY (id),
CONSTRAINT user_processes_process_id_fkey FOREIGN KEY (process_id) REFERENCES processes(id),
CONSTRAINT user_processes_user_id_fkey FOREIGN KEY (user_id) REFERENCES users(id)
) TABLESPACE pg_default;

CREATE TABLE public.user_sessions (
user_id uuid NOT NULL,
session_id uuid NOT NULL,
level_name text NULL,
level_standard double precision NULL,
weight_execution double precision NULL,
weight_soft double precision NULL,
weight_strategy double precision NULL,
val_overall double precision NULL,
val_execution double precision NULL,
val_soft double precision NULL,
val_strategy double precision NULL,
self_overall double precision NULL,
self_execution double precision NULL,
self_soft double precision NULL,
self_strategy double precision NULL,
val_gap double precision NULL,
created_at timestamp with time zone NULL DEFAULT now(),
CONSTRAINT user_sessions_pkey PRIMARY KEY (user_id, session_id),
CONSTRAINT user_sessions_session_id_fkey FOREIGN KEY (session_id) REFERENCES sessions(id),
CONSTRAINT user_sessions_user_id_fkey FOREIGN KEY (user_id) REFERENCES users(id)
) TABLESPACE pg_default;

CREATE TABLE public.user_teams (
id uuid NOT NULL,
user_id uuid NULL,
team_id uuid NULL,
created_at timestamp with time zone NULL DEFAULT CURRENT_TIMESTAMP,
CONSTRAINT user_teams_pkey PRIMARY KEY (id),
CONSTRAINT user_teams_team_id_fkey FOREIGN KEY (team_id) REFERENCES teams(id),
CONSTRAINT user_teams_user_id_fkey FOREIGN KEY (user_id) REFERENCES users(id)
) TABLESPACE pg_default;

CREATE TABLE public.users (
id uuid NOT NULL DEFAULT gen_random_uuid(),
name text NOT NULL,
surname text NOT NULL,
email text NOT NULL,
level uuid NULL,
admin boolean NOT NULL DEFAULT false,
company uuid NULL,
mentor uuid NULL,
created_at timestamp with time zone NULL DEFAULT now(),
auth_id uuid NULL,
CONSTRAINT users_pkey PRIMARY KEY (id),
CONSTRAINT users_auth_id_key UNIQUE (auth_id),
CONSTRAINT users_email_key UNIQUE (email),
CONSTRAINT users_auth_id_fkey FOREIGN KEY (auth_id) REFERENCES auth.users(id),
CONSTRAINT users_level_fkey FOREIGN KEY (level) REFERENCES levels(id),
CONSTRAINT users_mentor_fkey FOREIGN KEY (mentor) REFERENCES users(id),
CONSTRAINT users_company_fkey FOREIGN KEY (company) REFERENCES companies(id)
) TABLESPACE pg_default;
